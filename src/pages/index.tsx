/* eslint-disable @next/next/no-img-element */
import {
  home,
  eventListContainer,
  nation,
  eventNumber,
  cardContainer,
} from '@/styles/home.css.ts';
import Head from 'next/head';
import BasicMap from '@/components/map';
// css
import { useUserStore } from '@/store/user';
import { logout } from '@/modules/service/auth';
// import { EVENT_MOCK_DATA } from '../../public/data/event';
import { getIssues } from '@/modules/service/issues';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import IssueCard from '@/components/card/issueCard';

// declare global {
//   interface Window {
//     kakao: any;
//   }
// }

export default function Home({ initialIssues }) {
  const { accessToken, username, saveUser, removeUser } = useUserStore();
  // const { data, current_total, total } = initialIssues;
  const [issues, setIssues] = useState(initialIssues?.data);
  const [page, setPage] = useState(1);
  const router = useRouter();

  const logoutUser = async () => {
    try {
      const response = await logout();
      console.log(response);
      if (response.status === 200) {
        return alert('로그아웃 성공');
      }
      throw new Error();
    } catch (error: any) {
      if (error.status === 400) {
        return alert('로그아웃 실패');
      }
      throw new Error(error);
    }
  };

  const getMoreIssues = async (currentPage: number) => {
    try {
      const data = await getIssues(currentPage, 10); // 페이지에 따른 데이터 가져오기
      if (data.status === 200) {
        setIssues((prevIssues: any) => [...prevIssues, ...data.data]); // 기존 데이터와 병합
      }
    } catch (error) {
      console.error('Failed to fetch more issues:', error);
    }
  };

  useEffect(() => {
    if (page > 1) {
      getMoreIssues(page); // page가 변경될 때마다 데이터 가져오기
    }
  }, [page]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={home}>
        {/* <div>{username}</div>
        <div>{username ? '회원' : '비회원'}</div>
        <button>
          <Link href="/login">로그인</Link>
        </button>
        <button>
          <Link href="/sign-up">회원가입</Link>
        </button>
        <button>
          <Link href="/password/find">비밀번호찾기</Link>
        </button>
        <button onClick={logoutUser}>로그아웃</button> */}
        <BasicMap locationData={initialIssues?.data} />
        <div className={eventListContainer}>
          <div className={nation}>Korea</div>
          <div className={eventNumber}>
            사건, 사고 : {initialIssues?.total}개
          </div>
          <div className={cardContainer}>
            {issues.map((event, idx) => {
              return (
                <IssueCard
                  key={event.id}
                  event={event}
                  onFetchMore={() => setPage(prev => prev + 1)}
                  isLastEvent={issues.length - 1 === idx}
                />
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps = async () => {
  try {
    // TODO 데이터 받으면 현재위치랑, 사건 위치랑 비교해서 값 새로 넣어서 데이터 반환해야함
    const data = await getIssues(1, 10);

    if (data.status === 200) {
      return {
        props: { initialIssues: data },
      };
    }
    throw new Error();
  } catch (err) {
    return {
      notFound: false,
    };
  }
};
